
subprojects {

    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: 'signing'

    group = 'org.conductoross'

    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                pom {
                    name = 'Conductor OSS'
                    description = 'Conductor OSS build.'
                    url = 'https://github.com/conductor-oss/conductor'
                    scm {
                        connection = 'scm:git:git://github.com/conductor-oss/conductor.git'
                        developerConnection = 'scm:git:ssh://github.com/conductor-oss/conductor.git'
                        url = 'https://github.com/conductor-oss/conductor'
                    }
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            organization = 'Conductor OSS'
                            organizationUrl = 'https://conductor-oss.org/'
                            name = 'Conductor OSS'
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username project.properties.username
                    password project.properties.password
                }
            }
        }
    }

    signing {
        def signingKeyId = findProperty('signingKeyId')
        if (signingKeyId) {
            def signingKey = findProperty('signingKey')
            def signingPassword = findProperty('signingPassword')
            if (signingKeyId && signingKey && signingPassword) {
                useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
            }
            sign publishing.publications
        }

    }

}